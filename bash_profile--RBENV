# For debugging or just to have a fun little look under your BASH's hood.
# set -x

# echo is like puts for bash (bash is the program running in your terminal)
echo "Loading ~/.bash_profile a shell script that runs in every new terminal you open"

# $VARIABLE will render before the rest of the command is executed
echo "Logged in as $USER at $(hostname)"

# Set NVM
export NVM_DIR="/Users/TyMacTwo/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm


# Rbenv autocomplete and shims
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
# Path for RBENV
test -d $HOME/.rbenv/ && PATH="$HOME/.rbenv/bin:$PATH"

# Path changes are made non-destructive with PATH=new_path;$PATH   This is like A=A+B so we preserve the old path

# Path order matters, putting /usr/local/bin: before $PATH
# ensures brew programs will be seen and used before another program
# of the same name is called

# Path for brew
test -d /usr/local/bin && export PATH="/usr/local/bin:/usr/local/sbin:~/bin:$PATH"
# Path for Heroku
test -d /usr/local/heroku/ && export PATH="/usr/local/heroku/bin:$PATH"

# Load Android SDK to path
export PATH=${PATH}:/Users/apprentice/Desktop/android-sdk

# Alias git to hub
eval "$(hub alias -s)"

# Load git completions
git_completion_script=/usr/local/etc/bash_completion.d/git-completion.bash
test -s $git_completion_script && source $git_completion_script

# A more colorful prompt
# \[\e[0m\] resets the color to default color
c_reset='\[\e[0m\]'
#  \e[0;31m\ sets the color to red
c_path='\[\e[0;31m\]'
# \e[0;32m\ sets the color to green
c_git_clean='\[\e[0;32m\]'
# \e[0;31m\ sets the color to red
c_git_dirty='\[\e[0;31m\]'

# PS1 is the variable for the prompt you see everytime you hit enter
PROMPT_COMMAND='PS1="${c_path}\W${c_reset}$(git_prompt) :> "'

export PS1='\n\[\033[0;31m\]\W\[\033[0m\]$(git_prompt)\[\033[0m\]:> '

# determines if the git branch you are on is clean or dirty
git_prompt ()
{
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    return 0
  fi
  # Grab working branch name
  git_branch=$(Git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
  # Clean or dirty branch
  if git diff --quiet 2>/dev/null >&2; then
    git_color="${c_git_clean}"
  else
    git_color=${c_git_dirty}
  fi
  echo " [$git_color$git_branch${c_reset}]"
}

# Colors ls should use for folders, files, symlinks etc, see `man ls` and
# search for LSCOLORS
export LSCOLORS=ExGxFxdxCxDxDxaccxaeex
# Force ls to use colors (G) and use humanized file sizes (h)
alias ls='ls -Gh'

# Force grep to output in color unless the output is piped or redirected to a
# file (--color=auto) and display number lines (n)
alias grep="grep --color=auto -n"
# grep variant that always outputs in color (--color=always) and displays
# number lines (n)
alias grepc="grep --color=always -n"

# Set sublime as the default editor
which -s subl && export EDITOR="subl --wait"

# Aliases are useful. If I mistype a command three times I make an alias.

alias e=subl
alias a=atom
alias be="bundle exec"
alias dbc="cd ~/Dropbox/ACODE/DBC/dayJerbs"
alias code="cd ~/Dropbox/ACODE/adBC"
alias g=git
alias cl=clear
alias ga="git ca"
alias gl="git lg"
alias gb="git branch"
alias gpo="git push origin"
alias gph="git push heroku"
alias hubit="hub browse"
alias shitgun="shotgun"
alias shogun="shotgun"
alias shotfun="shotgun"
alias rials="rails"
alias gti="git"
alias bs="be shotgun"
alias 2reset="bundle install && be rake db:drop && be rake db:create && be rake db:migrate && be rake db:seed && be shotgun"
alias 3reset="bundle install && be rake db:drop && be rake db:create && be rake db:migrate && be rake db:test:prepare && be rake db:seed && rails s"

# Grabs all current PR's from within a GIT repo.
# Sets numerated branches. Switch to branch with:
# git co pr/$PR_NUMBER
function add_pr_remotes() {
  mv .git/config .git/config-orig
  awk '/remote "origin"/  {
    print $0
    getline;
    print $0
    getline;
    print $0
    print "\tfetch = +refs/pull/*/head:refs/remotes/origin/pr/*"
  }1' .git/config-orig > .git/config
  git fetch origin
}

# Human readable path now with extra fun emojis.
# Think emojis are dumb or unprofessional?
# Toggle off this code and use the last line instead.
function inspect_path() {
  old=$IFS
  IFS=:
  emojis=(☣️ ☮ ☢ 🏀 🍉 🌮 🐸 🌶 🐨 🌎 🌏 🐞 🐵 ☠️ 👻 👽 🤖 🐙 🚀 🐳 🕹 ☦)
  emoji=${emojis[$RANDOM % 22]}
  printf "$emoji : %s\n" $PATH
  ISF=$old
  # echo $PATH | tr ':' '\n'
}
